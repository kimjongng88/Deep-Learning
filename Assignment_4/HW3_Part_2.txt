{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install wget"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fQf-2aG6Q6C",
        "outputId": "4e34f49f-4259-46d9-a5e9-cab1225404d4"
      },
      "id": "5fQf-2aG6Q6C",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: wget in /usr/local/lib/python3.8/dist-packages (3.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "KAGYHAeGyYYF"
      },
      "outputs": [],
      "source": [
        "'provided modules and data'\n",
        "import wget, os, gzip, pickle, random, re, sys\n",
        "\n",
        "IMDB_URL = 'http://dlvu.github.io/data/imdb.{}.pkl.gz'\n",
        "IMDB_FILE = 'imdb.{}.pkl.gz'\n",
        "\n",
        "PAD, START, END, UNK = '.pad', '.start', '.end', '.unk'\n",
        "\n",
        "def load_imdb(final=False, val=5000, seed=0, voc=None, char=False):\n",
        "\n",
        "    cst = 'char' if char else 'word'\n",
        "\n",
        "    imdb_url = IMDB_URL.format(cst)\n",
        "    imdb_file = IMDB_FILE.format(cst)\n",
        "\n",
        "    if not os.path.exists(imdb_file):\n",
        "        wget.download(imdb_url)\n",
        "\n",
        "    with gzip.open(imdb_file) as file:\n",
        "        sequences, labels, i2w, w2i = pickle.load(file)\n",
        "\n",
        "    if voc is not None and voc < len(i2w):\n",
        "        nw_sequences = {}\n",
        "\n",
        "        i2w = i2w[:voc]\n",
        "        w2i = {w: i for i, w in enumerate(i2w)}\n",
        "\n",
        "        mx, unk = voc, w2i['.unk']\n",
        "        for key, seqs in sequences.items():\n",
        "            nw_sequences[key] = []\n",
        "            for seq in seqs:\n",
        "                seq = [s if s < mx else unk for s in seq]\n",
        "                nw_sequences[key].append(seq)\n",
        "\n",
        "        sequences = nw_sequences\n",
        "\n",
        "    if final:\n",
        "        return (sequences['train'], labels['train']), (sequences['test'], labels['test']), (i2w, w2i), 2\n",
        "\n",
        "    # Make a validation split\n",
        "    random.seed(seed)\n",
        "\n",
        "    x_train, y_train = [], []\n",
        "    x_val, y_val = [], []\n",
        "\n",
        "    val_ind = set( random.sample(range(len(sequences['train'])), k=val) )\n",
        "    for i, (s, l) in enumerate(zip(sequences['train'], labels['train'])):\n",
        "        if i in val_ind:\n",
        "            x_val.append(s)\n",
        "            y_val.append(l)\n",
        "        else:\n",
        "            x_train.append(s)\n",
        "            y_train.append(l)\n",
        "\n",
        "    return (x_train, y_train), \\\n",
        "           (x_val, y_val), \\\n",
        "           (i2w, w2i), 2\n",
        "\n",
        "\n",
        "def gen_sentence(sent, g):\n",
        "\n",
        "    symb = '_[a-z]*'\n",
        "\n",
        "    while True:\n",
        "\n",
        "        match = re.search(symb, sent)\n",
        "        if match is None:\n",
        "            return sent\n",
        "\n",
        "        s = match.span()\n",
        "        sent = sent[:s[0]] + random.choice(g[sent[s[0]:s[1]]]) + sent[s[1]:]\n",
        "\n",
        "def gen_dyck(p):\n",
        "    open = 1\n",
        "    sent = '('\n",
        "    while open > 0:\n",
        "        if random.random() < p:\n",
        "            sent += '('\n",
        "            open += 1\n",
        "        else:\n",
        "            sent += ')'\n",
        "            open -= 1\n",
        "\n",
        "    return sent\n",
        "\n",
        "def gen_ndfa(p):\n",
        "\n",
        "    word = random.choice(['abc!', 'uvw!', 'klm!'])\n",
        "\n",
        "    s = ''\n",
        "    while True:\n",
        "        if random.random() < p:\n",
        "            return 's' + s + 's'\n",
        "        else:\n",
        "            s+= word\n",
        "\n",
        "def load_brackets(n=50_000, seed=0):\n",
        "    return load_toy(n, char=True, seed=seed, name='dyck')\n",
        "\n",
        "def load_ndfa(n=50_000, seed=0):\n",
        "    return load_toy(n, char=True, seed=seed, name='ndfa')\n",
        "\n",
        "def load_toy(n=50_000, char=True, seed=0, name='lang'):\n",
        "\n",
        "    random.seed(0)\n",
        "\n",
        "    if name == 'lang':\n",
        "        sent = '_s'\n",
        "\n",
        "        toy = {\n",
        "            '_s': ['_s _adv', '_np _vp', '_np _vp _prep _np', '_np _vp ( _prep _np )', '_np _vp _con _s' , '_np _vp ( _con _s )'],\n",
        "            '_adv': ['briefly', 'quickly', 'impatiently'],\n",
        "            '_np': ['a _noun', 'the _noun', 'a _adj _noun', 'the _adj _noun'],\n",
        "            '_prep': ['on', 'with', 'to'],\n",
        "            '_con' : ['while', 'but'],\n",
        "            '_noun': ['mouse', 'bunny', 'cat', 'dog', 'man', 'woman', 'person'],\n",
        "            '_vp': ['walked', 'walks', 'ran', 'runs', 'goes', 'went'],\n",
        "            '_adj': ['short', 'quick', 'busy', 'nice', 'gorgeous']\n",
        "        }\n",
        "\n",
        "        sentences = [ gen_sentence(sent, toy) for _ in range(n)]\n",
        "        sentences.sort(key=lambda s : len(s))\n",
        "\n",
        "    elif name == 'dyck':\n",
        "\n",
        "        sentences = [gen_dyck(7./16.) for _ in range(n)]\n",
        "        sentences.sort(key=lambda s: len(s))\n",
        "\n",
        "    elif name == 'ndfa':\n",
        "\n",
        "        sentences = [gen_ndfa(1./4.) for _ in range(n)]\n",
        "        sentences.sort(key=lambda s: len(s))\n",
        "\n",
        "    else:\n",
        "        raise Exception(name)\n",
        "\n",
        "    tokens = set()\n",
        "    for s in sentences:\n",
        "\n",
        "        if char:\n",
        "            for c in s:\n",
        "                tokens.add(c)\n",
        "        else:\n",
        "            for w in s.split():\n",
        "                tokens.add(w)\n",
        "\n",
        "    i2t = [PAD, START, END, UNK] + list(tokens)\n",
        "    t2i = {t:i for i, t in enumerate(i2t)}\n",
        "\n",
        "    sequences = []\n",
        "    for s in sentences:\n",
        "        if char:\n",
        "            tok = list(s)\n",
        "        else:\n",
        "            tok = s.split()\n",
        "        sequences.append([t2i[t] for t in tok])\n",
        "\n",
        "    return sequences, (i2t, t2i)"
      ],
      "id": "KAGYHAeGyYYF"
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "juX0dvaQyYYP",
        "outputId": "ee30c8ce-58fc-4707-e00b-19dd72d12c6e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'torch.device'>\n"
          ]
        }
      ],
      "source": [
        "'PyTorch modules'\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "print(torch.device)\n",
        "\n",
        "'Basic Modules'\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "from tqdm import tqdm\n",
        "import random\n",
        "import warnings \n",
        "import math\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "id": "juX0dvaQyYYP"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fBd4a2lxyYYd"
      },
      "source": [
        "## PART 4: Autoregressive Models\n"
      ],
      "id": "fBd4a2lxyYYd"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "hnJ_DuPFyYYd"
      },
      "outputs": [],
      "source": [
        "def pad_a_batch_two(batch, max_len):\n",
        "    \"\"\"\n",
        "    pad 0s to the instances in the batch \n",
        "    (x_train or x_val) to get equal lengths\n",
        "    \"\"\"\n",
        "    new_batch = [] # Same as the previous\n",
        "    for ins in batch:\n",
        "        k = ins.copy()\n",
        "        if len(k) < int(max_len):\n",
        "            k.extend((max_len-len(ins))*[0])\n",
        "            new_batch.append(k)\n",
        "        else:\n",
        "            new_batch.append(k)\n",
        "    return new_batch\n",
        "\n",
        "\n",
        "\n",
        "def batched_and_padded_tensors_two(dt, maximum):\n",
        "    'Split data of lists into equal-sized chunks, and pad them'\n",
        "    batches = []\n",
        "    all_batches = []\n",
        "    length = 0\n",
        "    for i in range(len(dt)): # Make sure all is equal\n",
        "        batches.append(dt[i])\n",
        "        length += len(dt[i]) # NOTE we are looking at max tokens instead of sequences\n",
        "        if length < maximum: # If max not reached continue adding sequences\n",
        "            if i+1 == len(dt):\n",
        "                all_batches.append(batches)\n",
        "                break\n",
        "            continue\n",
        "        else: # If max is reached append\n",
        "            all_batches.append(batches)\n",
        "            length = 0 # Simple reset\n",
        "            batches = []\n",
        "\n",
        "    return all_batches\n",
        "    \n",
        "def finalize_set(x, y):\n",
        "\n",
        "    all_length = []\n",
        "    for a in x: \n",
        "        lengths = max([len(b) for b in a]) # Max token and not sequence. Since all must be equal, easiest is to get the biggest one\n",
        "        all_length.append(lengths) \n",
        "\n",
        "    x_batch = []\n",
        "    y_batch = []\n",
        "    \n",
        "    for i in range(len(x)): # Sequences with unequal length must be adjusted\n",
        "        x_batch.append(pad_a_batch_two(x[i], all_length[i])) # Append batches with equal length\n",
        "        y_batch.append(pad_a_batch_two(y[i], all_length[i])) # Append batches with equal length\n",
        "    \n",
        "    \n",
        "    return x_batch, y_batch\n",
        "\n",
        "\n",
        "def load_in(choice):\n",
        "    if choice == \"ndfa\":\n",
        "        x_train, (i2w, w2i) = load_ndfa(n = 150000)\n",
        "    elif choice == 'toy':\n",
        "        x_train, (i2w, w2i) = load_toy(n = 150000)\n",
        "    else:\n",
        "        x_train, (i2w, w2i) = load_brackets(n = 150000)\n",
        "    \n",
        "    print(w2i[\".start\"], w2i[\".end\"]) # Insert 1 at the beginning and 2 at the end to mark start and end of sequence\n",
        "    print(i2w[0])\n",
        "\n",
        "    x = []\n",
        "    for a in x_train:\n",
        "        a.insert(0, 1) # Mark start\n",
        "        a.append(2) # Mark end\n",
        "        x.append(a)\n",
        "    #print(x,\"final\")\n",
        "\n",
        "    y_train = []\n",
        "    for a in x: # Target is just the batch, shifted one token to the left.\n",
        "        b = a[1:] # Remove first column\n",
        "        b.append(0) # Append column of zeros\n",
        "        y_train.append(b)\n",
        "\n",
        "    x_batch = batched_and_padded_tensors_two(x_train, 250) # x_train after batching\n",
        "    y_batch = batched_and_padded_tensors_two(y_train, 250) # y_train after batching\n",
        "\n",
        "    x_final, y_final = finalize_set(x_batch, y_batch) # Set after padding, sequences in batches must have equal length\n",
        "\n",
        "    k = np.array(list(zip(x_final, y_final)))\n",
        "    np.random.shuffle(k)\n",
        "\n",
        "    \n",
        "    return k, (i2w, w2i)\n",
        "\n",
        "\n"
      ],
      "id": "hnJ_DuPFyYYd"
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "J2iLOfOkyYYd"
      },
      "outputs": [],
      "source": [
        "import torch.distributions as dist\n",
        "\n",
        "class LSTM(nn.Module):\n",
        "    def __init__(self, insize = 32, num_layer = 2, hsize = 16, vocab = 15):\n",
        "        super().__init__()\n",
        "        self.vocab = vocab\n",
        "        self.insize = insize\n",
        "        self.num_layer = num_layer\n",
        "        self.hsize = hsize\n",
        "        self.embd = nn.Embedding(vocab, insize)\n",
        "        self.Long_Short = nn.LSTM(insize, self.hsize, self.num_layer, batch_first=True)\n",
        "        self.fc = nn.Linear(hsize, self.vocab)\n",
        "        #self.softmax = nn.Softmax(dim=1)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "        assert torch.is_tensor(x), f'x is not Tensor, x is {type(x)}, {x}'\n",
        "        x = self.embd(x)\n",
        "        x,_ = self.Long_Short(x)\n",
        "        x = x.reshape(x.shape[0] * x.shape[1], self.hsize)\n",
        "        x = self.fc(x)\n",
        "        #x = self.softmax(x)\n",
        "        return x\n",
        "    \n",
        "\n",
        "\n"
      ],
      "id": "J2iLOfOkyYYd"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "nmu5UznxyYYe"
      },
      "outputs": [],
      "source": [
        "def sample(lnprobs, temperature):\n",
        "    \"\"\"\n",
        "    Sample an element from a categorical distribution\n",
        "    :param lnprobs: Outcome logits\n",
        "    :param temperature: Sampling temperature. 1.0 follows the given distribution, 0.0 returns the maximum probability element.\n",
        "    :return: The index of the sampled element.\n",
        "    \"\"\"\n",
        "    if temperature == 0.0:\n",
        "        return lnprobs.argmax()\n",
        "    p = F.softmax(lnprobs / temperature, dim=0)\n",
        "    cd = dist.Categorical(p)\n",
        "    return cd.sample()\n",
        "\n",
        "def pred(net, seq, temp, max_length):\n",
        "    a = torch.tensor([w2i[w] for w in seq])\n",
        "    a = a.to(device)\n",
        "    a = a.reshape(1,a.shape[0])\n",
        "    predicted = []\n",
        "    predicted.extend(seq)\n",
        "    for i in range(0, max_length):\n",
        "        b = net.forward(a)\n",
        "        final_position = b[-1]\n",
        "        sample_found = sample(final_position, temp)\n",
        "        sample_print = i2w[sample_found]\n",
        "        a = torch.cat((a, sample_found.reshape(1,1)), axis=1)\n",
        "        predicted.append(sample_print)\n",
        "        if sample_print == \".end\": # If .end is found before the maximum length, return the sample\n",
        "            return predicted\n",
        "    return predicted\n",
        "\n"
      ],
      "id": "nmu5UznxyYYe"
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "Fk-GKckJyYYe"
      },
      "outputs": [],
      "source": [
        "def easy_train_two(net, print_int, data, criterion,  optimizer, epoch, seq, PATH, temp=1., clipping=None):\n",
        "    # train model\n",
        "    loss_full = []\n",
        "    norm = []\n",
        "    epoch_losses = []\n",
        "    for epoch in range(epoch):  # loop over the dataset multiple times\n",
        "        running_loss = 0.0\n",
        "        i = 0\n",
        "        epoch_loss = 0\n",
        "        for batch in data:\n",
        "            # get the inputs; data is a list of [inputs, labels]\n",
        "            inputs, labels = batch[0], batch[1]\n",
        "            # transfer inputs and labels to tensor\n",
        "            inputs_ = torch.tensor(inputs)\n",
        "            labels_ = torch.tensor(labels)\n",
        "            inputs_ = inputs_.to(device)\n",
        "            labels_ = labels_.to(device)\n",
        "            # zero the parameter gradients\n",
        "            optimizer.zero_grad()\n",
        "            labels_ = labels_.reshape(labels_.shape[0]*labels_.shape[1],)\n",
        "            # forward + backward + optimize\n",
        "            outputs = net(inputs_)\n",
        "            outputs.to(device)\n",
        "            loss = criterion(outputs, labels_)\n",
        "            loss.backward()\n",
        "            loss_full.append(loss.item()/outputs.shape[0])\n",
        "            # clip gradients to the max given via clipping if not None\n",
        "            if clipping is not None:\n",
        "              torch.nn.utils.clip_grad_norm_(net.parameters(), clip_value=clipping)\n",
        "            optimizer.step()\n",
        "            # print statistics\n",
        "            running_loss += loss.item()/outputs.shape[0]\n",
        "            # don't change gradients when calculating gradient norms, using 2p norm here\n",
        "            with torch.no_grad():\n",
        "              total = 0\n",
        "              # calculating the average norm over all parameters\n",
        "              for par in net.parameters():\n",
        "                total += par.grad.data.norm(2).item()\n",
        "              norm.append(total)\n",
        "            if i % print_int == print_int-1:  \n",
        "                print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / print_int:.3f}')\n",
        "                epoch_loss += running_loss\n",
        "                running_loss = 0.0\n",
        "            i += 1\n",
        "\n",
        "        # sampling done here with a hardcoded max of 20 samples\n",
        "        if seq is not None:\n",
        "          for b in range(10):\n",
        "              print(b)\n",
        "              predict = pred(net, seq, temp, 20)\n",
        "              print(predict)\n",
        "\n",
        "        epoch_losses.append(epoch_loss/i)\n",
        "            \n",
        "    print('Finished Training')\n",
        "    \n",
        "    # save model\n",
        "    torch.save(net.state_dict(), PATH)\n",
        "#     model loading\n",
        "#     net = Net()\n",
        "#     net.load_state_dict(torch.load(PATH))\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "    return loss_full, norm, epoch_losses\n",
        "    "
      ],
      "id": "Fk-GKckJyYYe"
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "glRV7dyayYYf",
        "outputId": "3347230d-9d73-4d62-dbd2-4de53d0b79ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2\n",
            ".pad\n",
            "[1,  1000] loss: 0.523\n",
            "[1,  2000] loss: 0.211\n",
            "[1,  3000] loss: 0.200\n",
            "[1,  4000] loss: 0.200\n",
            "[1,  5000] loss: 0.196\n",
            "[1,  6000] loss: 0.196\n",
            "[1,  7000] loss: 0.198\n",
            "[1,  8000] loss: 0.191\n",
            "[1,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[2,  1000] loss: 0.195\n",
            "[2,  2000] loss: 0.197\n",
            "[2,  3000] loss: 0.197\n",
            "[2,  4000] loss: 0.197\n",
            "[2,  5000] loss: 0.195\n",
            "[2,  6000] loss: 0.195\n",
            "[2,  7000] loss: 0.197\n",
            "[2,  8000] loss: 0.190\n",
            "[2,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[3,  1000] loss: 0.195\n",
            "[3,  2000] loss: 0.196\n",
            "[3,  3000] loss: 0.196\n",
            "[3,  4000] loss: 0.197\n",
            "[3,  5000] loss: 0.194\n",
            "[3,  6000] loss: 0.195\n",
            "[3,  7000] loss: 0.197\n",
            "[3,  8000] loss: 0.190\n",
            "[3,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[4,  1000] loss: 0.195\n",
            "[4,  2000] loss: 0.198\n",
            "[4,  3000] loss: 0.196\n",
            "[4,  4000] loss: 0.197\n",
            "[4,  5000] loss: 0.194\n",
            "[4,  6000] loss: 0.195\n",
            "[4,  7000] loss: 0.196\n",
            "[4,  8000] loss: 0.190\n",
            "[4,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[5,  1000] loss: 0.195\n",
            "[5,  2000] loss: 0.196\n",
            "[5,  3000] loss: 0.196\n",
            "[5,  4000] loss: 0.197\n",
            "[5,  5000] loss: 0.194\n",
            "[5,  6000] loss: 0.195\n",
            "[5,  7000] loss: 0.196\n",
            "[5,  8000] loss: 0.190\n",
            "[5,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[6,  1000] loss: 0.194\n",
            "[6,  2000] loss: 0.196\n",
            "[6,  3000] loss: 0.196\n",
            "[6,  4000] loss: 0.197\n",
            "[6,  5000] loss: 0.194\n",
            "[6,  6000] loss: 0.195\n",
            "[6,  7000] loss: 0.196\n",
            "[6,  8000] loss: 0.190\n",
            "[6,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[7,  1000] loss: 0.194\n",
            "[7,  2000] loss: 0.196\n",
            "[7,  3000] loss: 0.196\n",
            "[7,  4000] loss: 0.197\n",
            "[7,  5000] loss: 0.196\n",
            "[7,  6000] loss: 0.194\n",
            "[7,  7000] loss: 0.196\n",
            "[7,  8000] loss: 0.190\n",
            "[7,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[8,  1000] loss: 0.194\n",
            "[8,  2000] loss: 0.196\n",
            "[8,  3000] loss: 0.196\n",
            "[8,  4000] loss: 0.197\n",
            "[8,  5000] loss: 0.196\n",
            "[8,  6000] loss: 0.194\n",
            "[8,  7000] loss: 0.196\n",
            "[8,  8000] loss: 0.189\n",
            "[8,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[9,  1000] loss: 0.194\n",
            "[9,  2000] loss: 0.196\n",
            "[9,  3000] loss: 0.196\n",
            "[9,  4000] loss: 0.197\n",
            "[9,  5000] loss: 0.194\n",
            "[9,  6000] loss: 0.195\n",
            "[9,  7000] loss: 0.196\n",
            "[9,  8000] loss: 0.189\n",
            "[9,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[10,  1000] loss: 0.194\n",
            "[10,  2000] loss: 0.196\n",
            "[10,  3000] loss: 0.196\n",
            "[10,  4000] loss: 0.197\n",
            "[10,  5000] loss: 0.194\n",
            "[10,  6000] loss: 0.194\n",
            "[10,  7000] loss: 0.196\n",
            "[10,  8000] loss: 0.189\n",
            "[10,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "[11,  1000] loss: 0.194\n",
            "[11,  2000] loss: 0.196\n",
            "[11,  3000] loss: 0.196\n",
            "[11,  4000] loss: 0.196\n",
            "[11,  5000] loss: 0.194\n",
            "[11,  6000] loss: 0.194\n",
            "[11,  7000] loss: 0.196\n",
            "[11,  8000] loss: 0.189\n",
            "[11,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[12,  1000] loss: 0.194\n",
            "[12,  2000] loss: 0.196\n",
            "[12,  3000] loss: 0.196\n",
            "[12,  4000] loss: 0.196\n",
            "[12,  5000] loss: 0.194\n",
            "[12,  6000] loss: 0.194\n",
            "[12,  7000] loss: 0.196\n",
            "[12,  8000] loss: 0.189\n",
            "[12,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "[13,  1000] loss: 0.194\n",
            "[13,  2000] loss: 0.197\n",
            "[13,  3000] loss: 0.196\n",
            "[13,  4000] loss: 0.196\n",
            "[13,  5000] loss: 0.194\n",
            "[13,  6000] loss: 0.194\n",
            "[13,  7000] loss: 0.196\n",
            "[13,  8000] loss: 0.192\n",
            "[13,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[14,  1000] loss: 0.194\n",
            "[14,  2000] loss: 0.197\n",
            "[14,  3000] loss: 0.196\n",
            "[14,  4000] loss: 0.196\n",
            "[14,  5000] loss: 0.194\n",
            "[14,  6000] loss: 0.194\n",
            "[14,  7000] loss: 0.196\n",
            "[14,  8000] loss: 0.189\n",
            "[14,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[15,  1000] loss: 0.194\n",
            "[15,  2000] loss: 0.196\n",
            "[15,  3000] loss: 0.196\n",
            "[15,  4000] loss: 0.196\n",
            "[15,  5000] loss: 0.195\n",
            "[15,  6000] loss: 0.194\n",
            "[15,  7000] loss: 0.196\n",
            "[15,  8000] loss: 0.189\n",
            "[15,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[16,  1000] loss: 0.194\n",
            "[16,  2000] loss: 0.196\n",
            "[16,  3000] loss: 0.196\n",
            "[16,  4000] loss: 0.196\n",
            "[16,  5000] loss: 0.194\n",
            "[16,  6000] loss: 0.194\n",
            "[16,  7000] loss: 0.196\n",
            "[16,  8000] loss: 0.189\n",
            "[16,  9000] loss: 0.196\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[17,  1000] loss: 0.194\n",
            "[17,  2000] loss: 0.197\n",
            "[17,  3000] loss: 0.196\n",
            "[17,  4000] loss: 0.197\n",
            "[17,  5000] loss: 0.194\n",
            "[17,  6000] loss: 0.194\n",
            "[17,  7000] loss: 0.196\n",
            "[17,  8000] loss: 0.190\n",
            "[17,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[18,  1000] loss: 0.194\n",
            "[18,  2000] loss: 0.196\n",
            "[18,  3000] loss: 0.196\n",
            "[18,  4000] loss: 0.196\n",
            "[18,  5000] loss: 0.194\n",
            "[18,  6000] loss: 0.194\n",
            "[18,  7000] loss: 0.196\n",
            "[18,  8000] loss: 0.189\n",
            "[18,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "[19,  1000] loss: 0.194\n",
            "[19,  2000] loss: 0.196\n",
            "[19,  3000] loss: 0.196\n",
            "[19,  4000] loss: 0.196\n",
            "[19,  5000] loss: 0.194\n",
            "[19,  6000] loss: 0.195\n",
            "[19,  7000] loss: 0.196\n",
            "[19,  8000] loss: 0.189\n",
            "[19,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "[20,  1000] loss: 0.194\n",
            "[20,  2000] loss: 0.196\n",
            "[20,  3000] loss: 0.196\n",
            "[20,  4000] loss: 0.196\n",
            "[20,  5000] loss: 0.195\n",
            "[20,  6000] loss: 0.195\n",
            "[20,  7000] loss: 0.196\n",
            "[20,  8000] loss: 0.189\n",
            "[20,  9000] loss: 0.195\n",
            "0\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "1\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "2\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "3\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "4\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "5\n",
            "['.start', 's', 'k', 'l', 'm', '!', 's', '.end']\n",
            "6\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "7\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "8\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 's', '.end']\n",
            "9\n",
            "['.start', 's', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k', 'l', 'm', '!', 'k']\n",
            "Finished Training\n"
          ]
        }
      ],
      "source": [
        "data,(i2w, w2i) = load_in(\"ndfa\")\n",
        "net = LSTM(num_layer=1)\n",
        "net.to(device)\n",
        "criterion = nn.CrossEntropyLoss(reduction='sum')\n",
        "epoch = 20\n",
        "seq = ['.start', 's', 'k']\n",
        "optimizer = optim.RMSprop(net.parameters(), lr=0.001)\n",
        "loss_ndfa, grad_ndfa, loss_ndfa_epoch = easy_train_two(net, 1000, data, criterion,  optimizer, epoch, seq, PATH = './Elman_net.pth', temp=0.8)"
      ],
      "id": "glRV7dyayYYf"
    },
    {
      "cell_type": "code",
      "source": [
        "i=0\n",
        "for par in net.parameters():\n",
        "  i += 1\n",
        "  print(par.shape)\n",
        "  print(par.grad.norm(2).item())\n",
        "print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dhVqECJ7kU7r",
        "outputId": "d565532e-3431-43d2-ecba-ad337bd08896"
      },
      "id": "dhVqECJ7kU7r",
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([15, 32])\n",
            "0.3551182448863983\n",
            "torch.Size([64, 32])\n",
            "0.885915219783783\n",
            "torch.Size([64, 16])\n",
            "0.37060609459877014\n",
            "torch.Size([64])\n",
            "0.14053362607955933\n",
            "torch.Size([64])\n",
            "0.14053362607955933\n",
            "torch.Size([15, 16])\n",
            "35.48550033569336\n",
            "torch.Size([15])\n",
            "15.164498329162598\n",
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(grad_ndfa[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CEIW2MEsQrda",
        "outputId": "4a084098-adbe-4aeb-d44b-9043f2873329"
      },
      "id": "CEIW2MEsQrda",
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "52.54270547628403\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(grad_ndfa)\n",
        "#plt.xlim(len(grad_ndfa)-100, len(grad_ndfa))\n",
        "#plt.ylim(0,250)\n",
        "plt.xlabel('Number of batches seen')\n",
        "plt.ylabel('Gradient norm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "7iq9xQblhhyy",
        "outputId": "1713873f-089b-40ad-c72e-00171def4a1d"
      },
      "id": "7iq9xQblhhyy",
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Gradient norm')"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(loss_ndfa)\n",
        "plt.xlabel('Number of batches seen')\n",
        "plt.ylabel('Average token loss per batch')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "6L8ZdriXh_zr",
        "outputId": "4e3155d7-b12a-4e96-8896-e01b819bb0b1"
      },
      "id": "6L8ZdriXh_zr",
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average token loss per batch')"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(loss_ndfa_epoch)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Training loss')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "xmYmbmygDi-d",
        "outputId": "52049f34-67de-46ec-bfa1-cf23c4c174c6"
      },
      "id": "xmYmbmygDi-d",
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Training loss')"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data,(i2w, w2i) = load_in(\"brackets\")\n",
        "net = LSTM(num_layer=1, vocab = 6, insize=16, hsize=32)\n",
        "net.to(device)\n",
        "criterion = nn.CrossEntropyLoss(reduction='sum')\n",
        "epoch = 20\n",
        "seq = ['.start', '(', '(', '(', '(', ')', '(', ')', ')', '(', '(', ')', '(']\n",
        "optimizer = optim.RMSprop(net.parameters(), lr=0.001)\n",
        "loss_brackets, grad_brackets, loss_brackets_epoch = easy_train_two(net, 1000, data, criterion,  optimizer, epoch, seq, PATH = './Elman_net.pth', temp=0.1, clipping=None)"
      ],
      "metadata": {
        "id": "tUDDvfEpjk8j"
      },
      "id": "tUDDvfEpjk8j",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(i2w)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WFiw2bi3m0rl",
        "outputId": "39950317-59ee-46e0-b709-05a3fe650517"
      },
      "id": "WFiw2bi3m0rl",
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['.pad', '.start', '.end', '.unk', ')', '(']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(grad_brackets)\n",
        "plt.xlabel('Number of batches seen')\n",
        "plt.ylabel('Gradient norm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "JKlnL9HehXBm",
        "outputId": "427b1b79-4a57-487f-f0a8-a060a6622acc"
      },
      "id": "JKlnL9HehXBm",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Gradient norm')"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(loss_brackets)\n",
        "plt.xlabel('Number of batches seen')\n",
        "plt.ylabel('Average token loss per batch')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "0MYyjV8biGP3",
        "outputId": "5f3383dd-57d6-4d28-f42d-84e394a11dd1"
      },
      "id": "0MYyjV8biGP3",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Average token loss per batch')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(loss_brackets_epoch)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Training loss')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "pQRbmBSrDqwF",
        "outputId": "748261ea-83b4-4063-c083-64c7b62d65b2"
      },
      "id": "pQRbmBSrDqwF",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Training loss')"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data,(i2w, w2i) = load_in('toy')\n",
        "net = LSTM(num_layer=3, vocab = 29, insize=64, hsize=128)\n",
        "net.to(device)\n",
        "criterion = nn.CrossEntropyLoss(reduction='sum')\n",
        "epoch = 1\n",
        "seq = None\n",
        "optimizer = optim.RMSprop(net.parameters(), lr=0.001)\n",
        "loss_toy, grad_toy, loss_toy_epoch = easy_train_two(net, 1000, data, criterion,  optimizer, epoch, seq, PATH = './Elman_net.pth', temp=0.1, clipping=None)"
      ],
      "metadata": {
        "id": "EawZNfIzp1fQ"
      },
      "id": "EawZNfIzp1fQ",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(grad_toy)\n",
        "plt.ylim(0,50)"
      ],
      "metadata": {
        "id": "x5uRtWxK4Z8T"
      },
      "id": "x5uRtWxK4Z8T",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(loss_toy)"
      ],
      "metadata": {
        "id": "eW96TpumsDPX"
      },
      "id": "eW96TpumsDPX",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(grad_toy[-10:])"
      ],
      "metadata": {
        "id": "ux_D0BQz1wQT"
      },
      "id": "ux_D0BQz1wQT",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "X8Q3JHPDD7uP"
      },
      "id": "X8Q3JHPDD7uP",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.8.7 64-bit",
      "name": "python387jvsc74a57bd0aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.7"
    },
    "colab": {
      "provenance": []
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}